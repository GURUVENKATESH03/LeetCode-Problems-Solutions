Problem Number in the Leet Code :56
Question:
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.



My Solution(In Java):
 for (int i = 1; i < intervals.length ; i++) {
            List<Integer> list = new ArrayList<>();
            if ((intervals[i][0] <= intervals[i - 1][1])) {
                start = intervals[i - 1][0];
                end = intervals[i][1];
                list.add(start);
                list.add(end);
                nwarray.add(list);
                continue;
            } else {
                int begin = intervals[i][0];
                int stop = intervals[i][1];
                list.add(begin);
                list.add(stop);
                nwarray.add(list);
                continue;
            }
}
System.out.println(nwarray);

Explanation of my code:
Intuition:
The code seems to be iterating through an array of intervals, possibly representing time intervals, and merging overlapping intervals.

Approach:
1.Iterate through the array of intervals.
2.For each interval, check if it overlaps with the previous interval.
3.If it overlaps, merge the intervals by updating the start and end times.
4.If it doesn't overlap, add the interval as it is.
5.Print the merged intervals.


Complexity Analysis:
  1.Time Complexity:
    1.1 The code iterates through the intervals array once, which has a length of n.
    1.2 Within each iteration, it performs constant time operations.Therefore, the time complexity is O(n).
  2.Space Complexity:
    2.1 Extra space is used to store the merged intervals in the nwarray.
    2.2 The size of nwarray depends on the number of intervals merged, but it won't exceed the size of the input intervals array.Therefore, the space complexity is O(n).



This code snippet demonstrates the merging of intervals and printing the merged intervals. However, it seems there are a couple of issues with the code:

-The start and end variables are used without being declared.
-The nwarray list is used without being declared or initialized.
You may want to ensure these variables are properly declared and initialized before running the code.
